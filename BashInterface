#!/bin/bash

function printHeader {
    clear
    echo "----------------------------------"
    echo "----------Haskell RSA 🔐----------"
    echo "----------------------------------"
    echo $1
    echo ""
}

function generateKey {
    printHeader  "         [Generate Key]"
    echo "1. 512-bit"
    echo "2. 1024-bit"
    echo "3. 2048-bit"
    echo "4. 5096-bit"
    echo "5. Cancel"
    echo ""

    read -p 'Select Key-Strength: ' option
    while [[ ! $option =~ ^[12345cCqQ]{1}$ ]]; do
        echo "Invalid option!"
        read -p 'Select Key-Strength: ' option
    done

    read -p 'Input Key-Name: ' keyName
    echo "Generating key..."

    if [ $option = "1" ]; then
        ./generateKey 512 >> KeyChain/$keyName
    elif [ $option = "2" ]; then
        ./generateKey 1024 >> KeyChain/$keyName
    elif [ $option = "3" ]; then
        ./generateKey 2048 >> KeyChain/$keyName
    elif [ $option = "4" ]; then
        ./generateKey 5096 >> KeyChain/$keyName 
    elif [[ $option =~ [5cCqQ] ]]; then
        return [n]
    fi

    echo "Success, new key placed in KeyChain directory."
    echo ""
    read -p 'Press enter to continue'
}

function encrypt {
    printHeader "           [Encrypt]"
 
    #For each file in `KeyChain` place, it in the map associated with the current counter
    declare -A FileMap
    count=1
    for filename in KeyChain/*; do
      temp=${filename:9}
      fileMap[$count]=$filename
      echo $count". "$temp
      ((count++))
    done

    #User input validation
    read -p 'Select public-key #: ' option
    while [ ! ${fileMap[$option]+_} ]; do
        echo "Invalid option!"
        read -p 'Select public-key: ' option
    done

    #Extract modulus from file
    modulus=$(sed '3q;d' ${fileMap[$option]})

    read -p 'Enter text to be encrypted: ' message
  
    ./encrypt $message 65537 $modulus  #Haskell Executable
     
    read -p 'Press enter to continue'
}

function decrypt {
    printHeader "           [Decrypt]"

    #For each file in `KeyChain` place, it in the map associated with the current counter
    declare -A FileMap
    count=1
    for filename in KeyChain/*; do
      temp=${filename:9}
      fileMap[$count]=$filename
      echo $count". "$temp
      ((count++))
    done

    #User input validation
    read -p 'Select key #: ' option
    while [ ! ${fileMap[$option]+_} ]; do
        echo "Invalid option!"
        read -p 'Select key: ' option
    done

    #Extract modulus and d from file
    modulus=$(sed '3q;d' ${fileMap[$option]})
    d=$(sed '9q;d' ${fileMap[$option]})

    read -p 'Enter ciphertext: ' cipher

    ./decrypt $cipher $d $modulus   #Haskell Executable

    read -p 'Press enter to continue'
}

function loadNewKey {
    printHeader "         [Load New Key]"
    echo "1. Public Key"
    echo "2. Private Key (requires corresponding public key)"
    echo "3. Cancel"

    read -p 'Select: ' option
    while [[ ! $option =~ ^[123cCqQ]{1}$ ]]; do
        echo "Invalid option!"
        read -p 'Select Key-Strength: ' option
    done

    if [ $option = "1" ]; then
        echo "new pub"
    elif [ $option = "2" ]; then
        echo "new priv"
    elif [[ $option =~ [3cCqQ] ]]; then
        return [n]
    fi
}

#Main Body of CLI
while [ True ]; do
    printHeader "          [Main Menu]"
    echo "1. Generate Key"
    echo "2. Encrypt"
    echo "3. Decrypt"
    echo "4. Load New Key"
    echo "5. Quit (or Ctrl+C)"
    echo ""

    read -p 'Select: ' option
    while [[ ! $option =~ ^[12345gGeEdDqQ]{1}$ ]]; do
        echo "Invalid option!"
        read -p 'Select: ' option
    done

    if [[ $option =~ [1gG] ]]; then
        generateKey
    elif [[ $option =~ [2eE] ]]; then
        encrypt
    elif [[ $option =~ [3dD] ]]; then
        decrypt
    elif [[ $option =~ [4lL] ]]; then
        loadNewKey
    elif [[ $option =~ [5qQ] ]]; then
        exit 1
    fi
done
